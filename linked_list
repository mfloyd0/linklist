#include <iostream>
#include <string>

using namespace std;

typedef string Elem;				// list element type

class DNode {					// doubly linked list node
private:
    Elem elem;					// node element value
    DNode* prev;				// previous node in list
    DNode* next;				// next node in list
    friend class DLinkedList;			// allow DLinkedList access
    friend class LinkedDeque;
};

class DLinkedList {				// doubly linked list
public:
    DLinkedList();				// constructor
    ~DLinkedList();				// destructor
    bool empty() const;				// is list empty?
    const Elem& front() const;			// get front element
    const Elem& back() const;			// get back element
    void addFront(const Elem& e);		// add to front of list
    void addBack(const Elem& e);		// add to back of list
    void removeFront();				// remove from front
    void removeBack();				// remove from back
    int n;
private:					// local type definitions
    DNode* header;				// list sentinels
    DNode* trailer;
protected:					// local utilities
    void add(DNode* v, const Elem& e);		// insert new node before v
    void remove(DNode* v);			// remove node v
};


class LinkedDeque {     //linkedDeque 
public:                                                     
    LinkedDeque() :n(0), D() {};    // construstor
    int size() const { return n; };     // get size
    bool empty() const { return n == 0; };  // is it empty
    const Elem& front() const { return D.front(); };    // get front element
    const Elem& back() const { return D.back(); };  // get back element 
    void insertFront(const Elem& e) { D.addFront(e); n++; };    // insert front element 
    void insertBack(const Elem& e) { D.addBack(e); n++; };  // insert back element 
    void removeFront() { D.removeFront(); n--; };   //remove front element
    void removeBack() { D.removeBack(); n--; };     //remove back element 
    void print(); // print
    void split(); // splits list in half
private:
    DLinkedList D;
    int n;
};

void LinkedDeque::print()   // prints list
{

    for (int i = 0; i < n; ++i)
    {
        Elem f = front();
        removeFront();
        insertBack(f);
        std::cout << f << "";
    }
    cout << "\n";
}


void LinkedDeque::split()   // splits list in half
{
    LinkedDeque firstPart;  // new place holders from seperated list
    LinkedDeque secondPart;
    while (!empty())   // checks if empty
    {
        Elem f = front(); // transfer of elements to new list.
        firstPart.insertFront(f);
        removeFront();
        

        if (!empty()) { // prevents empty error
            Elem b = back();
            secondPart.insertBack(b);
            removeBack();
        }
       
        
    }
    
        return secondPart.print(); // prints the new split list
 
}
DLinkedList::DLinkedList() : n(0) {			// constructor
    header = new DNode;				// create sentinels
    trailer = new DNode;
    header->next = trailer;			// have them point to each other
    trailer->prev = header;
}

DLinkedList::~DLinkedList() {			// destructor
    while (!empty()) removeFront();		// remove all but sentinels
    delete header;				// remove the sentinels
    delete trailer;
}


bool DLinkedList::empty() const		// is list empty?
{
    return (header->next == trailer);
}

const Elem& DLinkedList::front() const	// get front element
{
    return header->next->elem;
}

const Elem& DLinkedList::back() const		// get back element
{
    return trailer->prev->elem;
}


// insert new node before v
void DLinkedList::add(DNode* v, const Elem& e) {
    DNode* u = new DNode;  u->elem = e;		// create a new node for e
    u->next = v;				// link u in between v
    u->prev = v->prev;				// ...and v->prev
    v->prev->next = u;
    v->prev = u;
}

void DLinkedList::addFront(const Elem& e)	// add to front of list
{
    add(header->next, e);
    n++;
}

void DLinkedList::addBack(const Elem& e)	// add to back of list
{
    add(trailer, e);
    n++;
}

void DLinkedList::remove(DNode* v) {		// remove node v
    DNode* u = v->prev;				// predecessor
    DNode* w = v->next;				// successor
    u->next = w;				// unlink v from list
    w->prev = u;
    delete v;
    n--;
}

void DLinkedList::removeFront()		// remove from font
{
    remove(header->next);
}

void DLinkedList::removeBack()		// remove from back
{
    remove(trailer->prev);
}


int main() {
    DLinkedList lst;
    LinkedDeque line;

    line.insertBack("1");
    line.insertBack("2");
    line.insertBack("3");
    line.insertBack("4");
    line.insertBack("5");
    line.insertBack("6");
    line.insertBack("7");


    cout << line.front() << endl;

    line.print();
    line.split();

    return EXIT_SUCCESS;
}
